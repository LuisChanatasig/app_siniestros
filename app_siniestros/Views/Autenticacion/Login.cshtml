
@{
    ViewData["Title"] = "Home Page";
    Layout = null;
}

<!-- login.html -->
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Login - WebApp</title>
    <!-- Bootstrap 5 -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Velzon CSS -->
    <link href="/css/velzon.min.css" rel="stylesheet">
    <!-- Material Design Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/MaterialDesign-Webfont/7.4.47/css/materialdesignicons.min.css"
          integrity="sha512-/k658G6UsCvbkGRB3vPXpsPHgWeduJwiWGPCGS14IQw3xpr63AEMdA8nMYG2gmYkXitQxDTn6iiK/2fD4T87qA=="
          crossorigin="anonymous" referrerpolicy="no-referrer" />
    <!-- Custom login styles -->
    <link href="~/css/login.css" rel="stylesheet" />
    <link rel="manifest" href="/manifest.webmanifest">
    <meta name="theme-color" content="#0d6efd">

    <!-- iOS / iPadOS -->
    <link rel="apple-touch-icon" href="/icons/icon-192.png">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="Siniestros">
</head>
<body>
    <div class="login-card" id="loginCard">
        <button class="theme-toggle" id="themeToggle" aria-label="Toggle theme">🌙</button>
        <div class="logo-container text-center mb-3">
            <!-- Logo para modo claro -->
            <img id="logoLight" src="/img/logo_app_generales.png" alt="Logo light" class="logo" style="display:none; max-width: 150px;">
            <!-- Logo para modo oscuro -->
            <img id="logoDark" src="/img/logo_app_generales-dark.png" alt="Logo dark" class="logo" style="max-width: 150px;">
        </div>
        <h3 class="card-title text-center mb-4">Iniciar Sesión</h3>
        <form id="loginForm" asp-action="Inicio" asp-controller="Home">
            <div class="input-group mb-3">
                <span class="input-group-text"><i class="mdi mdi-account-outline fs-5"></i></span>
                <input type="text" id="inputEmail" class="form-control" placeholder="Usuario" required>
            </div>
            <div class="input-group mb-4">
                <span class="input-group-text"><i class="mdi mdi-lock-outline fs-5"></i></span>
                <input type="password" id="inputPassword" class="form-control" placeholder="Contraseña" required>
           @*      <span class="input-group-text toggle-password" style="cursor:pointer">
                    <i class="mdi mdi-eye-off-outline fs-5" id="togglePassword"></i>
                </span> *@
            </div>
            <div class="d-grid">
                <button type="submit" id="btnSubmit" class="btn btn-success position-relative">
                    Entrar
                    <span id="btnSpinner"
                          class="spinner-border spinner-border-sm text-light position-absolute top-50 end-0 translate-middle-y me-3 d-none"
                          role="status" aria-hidden="true"></span>
                </button>
            </div>
        </form>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/velzon.bundle.min.js"></script>
    <script>
        // Elementos clave
        const loginCard   = document.getElementById('loginCard');
        const toggleBtn   = document.getElementById('themeToggle');
        const logoLight   = document.getElementById('logoLight');
        const logoDark    = document.getElementById('logoDark');
        const loginForm   = document.getElementById('loginForm');
        const btnSubmit   = document.getElementById('btnSubmit');
        const btnSpinner  = document.getElementById('btnSpinner');
        const togglePassI = document.getElementById('togglePassword');
        const passField   = document.getElementById('inputPassword');

        // Inicializar tema según lo guardado en localStorage
        const currentTheme = localStorage.getItem('theme') || 'dark';
        document.body.dataset.theme = currentTheme;
        if (currentTheme === 'light') applyLightMode();
        else                         applyDarkMode();

        // Click en toggle tema
        toggleBtn.addEventListener('click', () => {
            if (document.body.dataset.theme === 'dark') {
                applyLightMode();
                localStorage.setItem('theme', 'light');
            } else {
                applyDarkMode();
                localStorage.setItem('theme', 'dark');
            }
        });

        function applyLightMode() {
            document.body.dataset.theme = 'light';
            loginCard.classList.add('light-mode');
            // Mostrar logo claro / ocultar oscuro
            logoLight.style.display = 'block';
            logoDark.style.display  = 'none';
            toggleBtn.textContent = '☀️';
        }

        function applyDarkMode() {
            document.body.dataset.theme = 'dark';
            loginCard.classList.remove('light-mode');
            // Mostrar logo oscuro / ocultar claro
            logoLight.style.display = 'none';
            logoDark.style.display  = 'block';
            toggleBtn.textContent = '🌙';
        }

        // // Toggle visibilidad de contraseña
        // togglePassI.addEventListener('click', () => {
        //     const type = passField.getAttribute('type') === 'password' ? 'text' : 'password';
        //     passField.setAttribute('type', type);
        //     togglePassI.classList.toggle('mdi-eye-outline');
        //     togglePassI.classList.toggle('mdi-eye-off-outline');
        // });

        // Spinner en el botón al enviar
        loginForm.addEventListener('submit', (e) => {
            btnSubmit.disabled = true;
            btnSpinner.classList.remove('d-none');
        });
    </script>
    <script>
        if ('serviceWorker' in navigator) {
          window.addEventListener('load', () => {
            navigator.serviceWorker.register('/service-worker.js')
              .catch(err => console.error('SW fail:', err));
          });
        }

        // Botón instalar opcional
        let deferredPrompt;
        window.addEventListener('beforeinstallprompt', (e) => {
          e.preventDefault();
          deferredPrompt = e;
          const btn = document.getElementById('btnInstall');
          if (btn) btn.classList.remove('d-none');
        });

        async function installPWA() {
          if (!deferredPrompt) return;
          deferredPrompt.prompt();
          await deferredPrompt.userChoice;
          deferredPrompt = null;
          const btn = document.getElementById('btnInstall');
          if (btn) btn.classList.add('d-none');
        }
    </script>

    <script>
        (async () => {
          const ASSETS = ['/', '/offline.html', '/css/site.css', '/js/site.js'];
          for (const url of ASSETS) {
            try {
              const r = await fetch(url, { cache: 'no-cache' });
              console.log(url, r.status, r.ok ? 'OK' : 'FAIL');
            } catch (e) {
              console.error(url, e);
            }
          }
        })();
    </script>

</body>
</html>
